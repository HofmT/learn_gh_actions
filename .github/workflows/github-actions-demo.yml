name: CI
run-name: ${{ github.actor }} is testing out GitHub Actions üöÄ
on: 
  push:
    branches:
      - test_gh_actions
jobs:
  test:
    runs-on: ubuntu-latest
    container: node:20.16-bullseye
    services:
      postgres:
        image: postgres:16.1
        options: --health-cmd="pg_isready -U plural" --health-interval=10s --health-timeout=5s --health-retries=5
        env:
          POSTGRES_USER: plural
          POSTGRES_PASSWORD: "plural"
          POSTGRES_DB: plural_integration
      neo4j:
        image: neo4j:5.9.0-enterprise
        env:
          _JAVA_OPTIONS: -Xmx2g
          NEO4J_ACCEPT_LICENSE_AGREEMENT: 'yes'
          NEO4J_AUTH: 'neo4j/plural_123'
          NEO4J_dbms_connector_http_listen__address: ':7484'
          NEO4J_dbms_connector_bolt_listen__address: ':7697'
          NEO4J_PLUGINS: '["apoc"]'
      mongo:
        image: mongo:7.0.12
      redis:
        image: redis:5.0
      rabbitmq:
        image: rabbitmq:3.12.12-alpine
      elasticsearch:
        image: docker.elastic.co/elasticsearch/elasticsearch:8.14.3
        env:
          xpack.security.enabled: false
          http.port: 9250
          http.cors.enabled: true
          bootstrap.memory_lock: true
          discovery.type: 'single-node'
          ES_JAVA_OPTS: -Xms1024m -Xmx1024m
          action.destructive_requires_name: false

    steps:
      - run: echo "üéâ The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "The nodejs version is $(node -v)"
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Install Dockerize
        run: |
          curl -L https://github.com/jwilder/dockerize/releases/download/v0.8.0/dockerize-linux-amd64-v0.8.0.tar.gz \
          | tar -C /usr/local/bin -xzv

      - name: Check PostgreSQL service
        run: |
          dockerize -wait tcp://postgres:5432 -timeout 1m

      - name: Check Neo4j service
        run: |
          dockerize -wait tcp://neo4j:7484 -timeout 1m

      - name: Check MongoDB service
        run: |
          dockerize -wait tcp://mongo:27017 -timeout 1m

      - name: Check Elasticsearch service
        run: |
          dockerize -wait tcp://elasticsearch:9250 -timeout 1m

      - run: echo "üçè This job's status is ${{ job.status }}."

